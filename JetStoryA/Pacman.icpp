#include "JetStory.h"

Pointf RotateClockwise(Pointf p)
{
	return Pointf(p.y, -p.x);
}

Pointf RotateAntiClockwise(Pointf p)
{
	return Pointf(-p.y, p.x);
}

struct Pacman : Enemy {
	Pointf accel = Pointf(0, 0);
	int direction = 0;
	int pphase = -1;
	bool falling;
	bool cw;

	virtual void SerializeKind(Stream& s) { s % accel % direction % pphase % cw; }

	virtual Size  GetSize() const {
		return JetStoryImg::pacman0().GetSize();
	}
	
	virtual void Do() {
		Rectf r = GetRect();
		
		bool c[4];
		c[0] = MapCollision(r.Offseted(0, 0.2)); // bottom
		c[1] = MapCollision(r.Offseted(0.2, 0)); // right
		c[2] = MapCollision(r.Offseted(0, -0.2)); // top
		c[3] = MapCollision(r.Offseted(-0.2, 0)); // left

		int phase = (((GameTick() + randomize) >> 4) & 3);
		
		image = JetStoryImg::Get(JetStoryImg::I_pacman0 + phase);

		if(falling) {
			direction = 0;
			if(Move(GetSize(), 0.15) && abs(speed.y) < 0.1 && last_bounce.y <= 0)
				falling = false;
		}
		else {
			if(cw) {
				int d = -direction;
				if(!c[d & 3])
					direction--;
				else
				if(c[(d - 1) & 3])
					direction++;
				direction &= 3;
				speed = decode(direction, 0, Pointf(-1, 0), 1, Pointf(0, -1), 2, Pointf(1, 0), Pointf(0, 1));
			}
			else {
				if(!c[direction])
					direction--;
				else
				if(c[(direction + 1) & 3])
					direction++;
				direction &= 3;
				speed = decode(direction, 0, Pointf(1, 0), 1, Pointf(0, -1), 2, Pointf(-1, 0), Pointf(0, 1));
			}

			speed *= 0.2;
			Move(GetSize(), 0, 0, 0);
			if(phase == 0 && pphase != 0)
				Beep(-1, "261.62:L10V60D60S20R50:V160D50S0B:V100f7::", 60, 250 + Random(20), 800);

			image_flags = decode(direction, 0, 0, 1, (int)(ROTATE), 2, (int)(SWAPX|SWAPY), (int)(ROTATE|SWAPX|SWAPY));
			if(cw)
				image_flags ^= SWAPX;
		}
		
		if(direction == 2 && (Random(3000) == 0
		   || distance < 200 && ship.pos.y > pos.y && abs(ship.pos.x - pos.x) < 120 && Random(200) == 0)) {
		    Beep(0, "2092.99:L50V100r3A80R42:V100r3:V80f7r4:V145f7:", 90, Random(200) + 1900, 800);
			falling = true;
			speed.x = 0;
			cw = !cw;
		}
		
		if(pos.x < -10 * BLOCKSIZE)
			cw = false;
		
		if(pos.x > (MAPX + 10) * BLOCKSIZE)
			cw = true;
		
		pphase = phase;
	}
	
	Pacman() {
		direction = 0;
		falling = true;
		cw = true;
		damage = 80;
		shield = 12;
		global = true;
		speed.y = -0.1 * Randomf();
		speed.x = 3 * Randomf();
	}
};

REGISTER(Pacman);
